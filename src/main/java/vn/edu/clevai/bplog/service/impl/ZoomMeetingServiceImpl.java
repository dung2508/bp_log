package vn.edu.clevai.bplog.service.impl;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import vn.edu.clevai.bplog.common.enumtype.PositionAssignEnum;
import vn.edu.clevai.bplog.entity.BpClagClassgroup;
import vn.edu.clevai.bplog.entity.BpUsiUserItem;
import vn.edu.clevai.bplog.entity.logDb.BpUniqueLearningComponent;
import vn.edu.clevai.bplog.entity.zoom.UsiZoomMeeting;
import vn.edu.clevai.bplog.entity.zoom.ZoomMeeting;
import vn.edu.clevai.bplog.repository.zoom.ZoomMeetingRepository;
import vn.edu.clevai.bplog.service.*;
import vn.edu.clevai.common.api.exception.NotFoundException;
import vn.edu.clevai.common.api.util.DateUtils;
import vn.edu.clevai.common.proxy.zoom.payload.request.ZoomMeetingCreationRequest;
import vn.edu.clevai.common.proxy.zoom.payload.response.ZoomMeetingCreationResponse;
import vn.edu.clevai.common.proxy.zoom.payload.response.ZoomMeetingDetailsResponse;

import java.sql.Timestamp;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

@Service
public class ZoomMeetingServiceImpl implements ZoomMeetingService {
	private final ZoomMeetingRepository zoomMeetingRepository;
	private final ZoomMeetingService zoomMeetingService;

	private final UsiZoomMeetingService usiZoomMeetingService;

	private final ZoomService zoomService;

	private final BpULCService ulcService;

	private final BpUsiUserItemService userItemService;

	private final BpClagClassgroupService clagClassgroupService;

	@Value("${geta.zoom.api_key}")
	private String getaZoomApiKey;

	@Value("${geta.zoom.api_secret}")
	private String getaZoomApiSecret;

	public ZoomMeetingServiceImpl(ZoomMeetingRepository zoomMeetingRepository, @Lazy ZoomMeetingService zoomMeetingService, UsiZoomMeetingService usiZoomMeetingService, ZoomService zoomService, BpULCService ulcService, BpUsiUserItemService userItemService, BpClagClassgroupService clagClassgroupService) {
		this.zoomMeetingRepository = zoomMeetingRepository;
		this.zoomMeetingService = zoomMeetingService;
		this.usiZoomMeetingService = usiZoomMeetingService;
		this.zoomService = zoomService;
		this.ulcService = ulcService;
		this.userItemService = userItemService;
		this.clagClassgroupService = clagClassgroupService;
	}

	@Override
	public ZoomMeeting findById(Long id) {
		return zoomMeetingRepository
				.findById(id)
				.orElseThrow(
						() -> new NotFoundException(String.format("Zoom meeting (id=%d) not found", id))
				);
	}

	@Override
	@Transactional
	public ZoomMeeting renewStartUrl(Long meetingId) {
		ZoomMeeting zoomMeeting = findById(meetingId);

		String authorizationHeader = zoomService.generateAuthorizationHeader(
				getaZoomApiKey,
				getaZoomApiSecret
		);

		ZoomMeetingDetailsResponse response = zoomService.getMeetingDetails(meetingId, authorizationHeader);

		zoomMeeting.setUuid(response.getUuid());
		zoomMeeting.setStartUrl(response.getStartUrl());

		return zoomMeeting;
	}

	@Override
	public ZoomMeeting create(String usiCode, String ulcCode, String clagCode) {
		BpUniqueLearningComponent ulc = ulcService.findByCode(ulcCode);
		if (Objects.isNull(ulc)) {
			throw new NotFoundException("Not found ulc with ulc_code: " + ulcCode);
		}
		BpUsiUserItem usi = userItemService.findByCode(usiCode);
		if (Objects.isNull(usi)) {
			throw new NotFoundException("Not found usi with usi_code: " + usiCode);
		} else if (StringUtils.isBlank(usi.getEmail())) {
			throw new NotFoundException("Couldn't find usi email with usi_code: " + usiCode);
		}

		BpClagClassgroup clag = clagClassgroupService.findByCode(clagCode);
		if (Objects.isNull(clag)) {
			throw new NotFoundException("Not found clag with clagCode: " + clagCode);
		}

		Long duration = 180L;
		/*  Zoom meeting should start 30 minutes earlier the ulc. */
		Timestamp startTime = DateUtils.subtractSecondsFromTimestamp(ulc.getMyCap().getStartTime(), 30 * 60);

		/*  Zoom meeting's description. */
		ZonedDateTime localLiveAt = ZonedDateTime.ofInstant(
				ulc.getMyCap().getStartTime().toInstant(), ZoneId.of(DateUtils.LOCAL_TIME_ZONE));

		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm, dd/MM/yyyy");

		String agenda = String.format(
				"Giáo viên: %s\nThời gian: %s",
				usi.getFullname(),
				formatter.format(localLiveAt)
		);

		ZoomMeetingCreationRequest externalRequest = ZoomMeetingCreationRequest
				.builder()
				.password(null)
				.defaultPassword(true) /* Password will be generated by zoom. */
				.durationInMinutes(duration) /* Hard-coded, will be updated later. */
				.preSchedule(false)
				.startTime(startTime)
				.topic(clag.getName())
				.agenda(agenda)
				.settings(
						ZoomMeetingCreationRequest.Settings
								.builder()
								.additionalDataCenterRegions(Collections.emptyList())
								.autoRecording("cloud") /* Store in zoom's cloud. */
								.hostVideo(true) /* Allow host's video. */
								.jbhTime(0L) /* Allow participants to join anytime */
								.joinBeforeHost(true) /* Allow participant to join before the host. */
								.muteOnEntry(false) /* Participants can speak right after joining. */
								.participantVideo(true) /* Allow participant's video. */
								.showShareButton(false) /* Allow participants not to see the share button. */
								.audio("both")
								.build()
				)
				.build();

		String authorizationHeader = zoomService.generateAuthorizationHeader(
				getaZoomApiKey,
				getaZoomApiSecret
		);

		ZoomMeetingCreationResponse response = zoomService.createMeeting(
				usi.getEmail(), /* Email of the host account in zoom, instead of using alternative hosts. */
				authorizationHeader,
				externalRequest
		);

		ZoomMeeting zoomMeeting = ZoomMeeting
				.builder()
				.agenda(response.getAgenda())
				.alternativeHosts(response.getSettings().getAlternativeHosts())
				.autoRecording(response.getSettings().getAutoRecording())
				.duration(response.getDuration() * 60L)
				.encryptedPassword(response.getEncryptedPassword())
				.h323Password(response.getH323Password())
				.hostEmail(response.getHostEmail())
				.hostId(response.getHostId())
				.hostVideo(response.getSettings().getHostVideo())
				.id(response.getId())
				.jbhTime(response.getSettings().getJbhTime())
				.joinBeforeHost(response.getSettings().getJoinBeforeHost())
				.joinUrl(response.getJoinUrl())
				.preSchedule(response.getPreSchedule())
				.participantVideo(response.getSettings().getParticipantVideo())
				.password(response.getPassword())
				.preSchedule(response.getPreSchedule())
				.pstnPassword(response.getPstnPassword())
				.requestPermissionToUnmuteParticipants(response.getSettings().getRequestPermissionToUnmuteParticipants())
				.showShareButton(response.getSettings().getShowShareButton())
				.startTime(response.getStartTime())
				.startUrl(response.getStartUrl())
				.status(response.getStatus())
				.timezone(response.getTimezone())
				.topic(response.getTopic())
				.type(response.getType())
				.uuid(response.getUuid())
				.zoomCreatedAt(response.getCreatedAt())
				.alternativeHosts(response.getSettings().getAlternativeHosts())
				.assistantId(response.getAssistantId())
				.audio(response.getSettings().getAudio())
				.code(response.getId().toString())
				.published(true)
				.build();

		return zoomMeetingRepository.save(zoomMeeting);
	}

	@Override
	public ZoomMeeting createAndAssign(String usiCode, String ulcCode, String clagCode) throws Exception {
		BpUsiUserItem usi = userItemService.findByCode(usiCode);
		if (Objects.isNull(usi)) {
			throw new NotFoundException("Not found usi with usi_code: " + ulcCode);
		}

		List<UsiZoomMeeting> usiZoomMeetingList = usiZoomMeetingService.findByUlcAndPublished(ulcCode, true);
		if (!usiZoomMeetingList.isEmpty() && !Objects.equals(usiZoomMeetingList.get(0).getUsi(), usiCode)) {
			usiZoomMeetingService.unpublished(usiZoomMeetingList.get(0).getCode());
			usiZoomMeetingService.createOrUpdate(buildUsiZoomMeeting(usiZoomMeetingList.get(0).getZoomMeetingCode(),
					usi.getCode(), ulcCode, PositionAssignEnum.BACKUP.getName()));
		}

		if (usiZoomMeetingList.isEmpty()) {
			ZoomMeeting zoomMeeting = zoomMeetingService.create(usiCode, ulcCode, clagCode);
			usiZoomMeetingService.createOrUpdate(
					buildUsiZoomMeeting(zoomMeeting.getCode(),
							usi.getCode(), ulcCode, PositionAssignEnum.MAIN.getName()));
			return zoomMeeting;
		}

		return zoomMeetingRepository.findFirstByCode(usiZoomMeetingList.get(0).getZoomMeetingCode()).orElse(null);
	}

	private UsiZoomMeeting buildUsiZoomMeeting(String zoomMeetingCode, String usiCode, String ulcCode, String position) {
		return UsiZoomMeeting.builder()
				.code(String.join("-", zoomMeetingCode, usiCode, ulcCode))
				.zoomMeetingCode(zoomMeetingCode)
				.usi(usiCode)
				.ulcCode(ulcCode)
				.published(true)
				.position(position)
				.build();
	}
}
